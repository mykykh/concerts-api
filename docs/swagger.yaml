definitions:
  domain.Concert:
    properties:
      author-id:
        type: string
      create-date:
        type: string
      description:
        type: string
      id:
        type: integer
      location:
        type: string
      title:
        type: string
      update-date:
        type: string
    type: object
  domain.Ticket:
    properties:
      concert-id:
        type: integer
      create-date:
        type: string
      id:
        type: integer
      update-date:
        type: string
      user-id:
        type: string
      verification-token:
        type: string
    type: object
info:
  contact: {}
  title: Concerts api
paths:
  /concerts:
    get:
      description: |-
        Returns list of 10 last concerts in db oredered by concert_id.
        Use last_id query parameter to select concerts before this last_id
      parameters:
      - description: id before which to get last concerts
        in: query
        name: last_id
        type: integer
      responses: {}
      summary: Returns list of concerts
      tags:
      - Concerts
    post:
      parameters:
      - description: Concert to create
        in: body
        name: concert
        required: true
        schema:
          $ref: '#/definitions/domain.Concert'
      responses: {}
      security:
      - BearerAuth: []
      summary: Creates new concert
      tags:
      - Concerts
  /concerts/{id}:
    get:
      parameters:
      - description: Concert id
        in: path
        name: id
        required: true
        type: integer
      responses: {}
      summary: Returns concert info
      tags:
      - Concerts
    put:
      parameters:
      - description: Concert id
        in: path
        name: id
        required: true
        type: integer
      - description: Updated concert info
        in: body
        name: concert
        required: true
        schema:
          $ref: '#/definitions/domain.Concert'
      responses: {}
      security:
      - BearerAuth: []
      summary: Updates concert info
      tags:
      - Concerts
  /tickets:
    get:
      description: |-
        Returns list of 10 last tickets in db oredered by ticket_id.
        Use last_id query parameter to select tickets before this last_id
      parameters:
      - description: id before which to get last tickets
        in: query
        name: last_id
        type: integer
      responses: {}
      security:
      - BearerAuth: []
      summary: Returns list of tickets
      tags:
      - Tickets
    post:
      parameters:
      - description: Ticket to create
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/domain.Ticket'
      responses: {}
      security:
      - BearerAuth: []
      summary: Creates new ticket
      tags:
      - Tickets
  /tickets/{id}:
    get:
      parameters:
      - description: Ticket id
        in: path
        name: id
        required: true
        type: integer
      responses: {}
      security:
      - BearerAuth: []
      summary: Returns ticket info
      tags:
      - Tickets
    put:
      parameters:
      - description: Ticket id
        in: path
        name: id
        required: true
        type: integer
      - description: Updated ticket info
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/domain.Ticket'
      responses: {}
      security:
      - BearerAuth: []
      summary: Updates ticket info
      tags:
      - Tickets
  /tickets/own:
    get:
      description: |-
        Returns list of 10 last tickets that the user has in db oredered by ticket_id.
        Use last_id query parameter to select tickets before this last_id
      parameters:
      - description: id before which to get last tickets
        in: query
        name: last_id
        type: integer
      responses: {}
      security:
      - BearerAuth: []
      summary: Returns list of tickets that user has
      tags:
      - Tickets
securityDefinitions:
  BearerAuth:
    description: 'To obtain token go to [/auth/login](/auth/login). You also need
      to add Bearer before pasting it belove. It should look like: Bearer your-access-token'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
